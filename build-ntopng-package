#!/usr/bin/env bash

#  Build a Debian package for ntopng from source and push it into the my personal PPA
#  repository
#
#  For additional info on setting up a PPA repository site with Github Pages see
#  https://earthly.dev/blog/creating-and-hosting-your-own-deb-packages-and-apt-repo/

#  PREREQ: /usr/podman build --platform=linux/aarch64 --tag=ntopng-builder .
#  - For aarch64 emulation under docker on Fedora: dnf install qemu-user-binfmt
#  - I had segfaults buidling the container until I did:
#    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes -c yes
DEBIAN_CONTAINER="ntopng-builder"

#  if "STABLE_VERSION" or "NDPI_STABLE_VERSION" are set, build the stable code branch of each.
#STABLE_VERSION='5.6'
#NDPI_STABLE_VERSION='4.6'

#  If DEBUG=true then the build container will go to a bash prompt when an error
#  occurs during the compile/package build.  Otherwise it will vaporize.
#DEBUG=true

#  Local copy of my PPA repository web site
TARGETDIR="${HOME}/src/udm-hacks/ppa"

#  Date/time format for console messages
DATEFMT="+%Y-%m-%d %H:%M:%S"

#  Terminate script immediately if/when error occurs
set -e

#  When not running in the container, start the container to build the package from source,
#  then push the resulting package to my PPA repo.
if [ $(cat /etc/hostname) == "fang.localdomain" ]; then
	
	#  Process command line options
	TESTING="no"
	UPDATEONLY="NO"
	while getopts ":btuh" OPT; do
		case "$OPT" in
			t)
				TESTING="YES"
				;;
			u)
				UPDATEONLY="YES"
				;;
			h)
				echo "usage: $0 [-t] [-u]"
				echo 
				echo "   Where:"
				echo "      -t Start the Docker build container with a bash prompt for testing"
				echo "      -u Do not do a build, just ppdate the Git Pages PPA repository."
				exit
				;;
			*)
				echo "usage: $0 [-t] [-u]"
				exit 1
		esac
	done
	shift $((OPTIND-1))
	if [ "$TESTING" == "YES" ] && [ "$UPDATEONLY" == "YES" ]; then
		echo "The -t and -u options cannot be used together at the same time"
		exit 1
	fi

	#  If this isn't just a repo refresh, start the Docker build container
	#  to compile the source and build the packages
	if [ "$UPDATEONLY" == "NO" ]; then
		if [ "$TESTING" == "YES" ]; then
			#  Start the container with a bash prompt
			/usr/bin/podman run --platform=linux/aarch64 --name=ntopng-builder -it --rm --volume="$HOME":"$HOME" "$DEBIAN_CONTAINER" /bin/bash
			exit
		else
			#  Run this script inside the container to build the package files
			echo "$(date "$DATEFMT"): Starting $DEBIAN_CONTAINER container"
			OPT=""
			if [ $DEBUG ]; then
				OPT="-it"
			fi
			/usr/bin/podman run --platform=linux/aarch64 --name=ntopng-builder $OPT --rm --volume="$HOME":"$HOME" "$DEBIAN_CONTAINER" "$(realpath "$0")" "$TARGETDIR"
		fi
	fi

	#  Update the repo metadata
	${TARGETDIR}/../update_ppa
		
else
	#  This is what runs inside the container to do the Debian package build from source
	
	if [ $DEBUG ]; then
		#  Go to a bash prompt if an error occurs
		trap /bin/bash ERR
	fi

	#  Where to put the *.deb files when we're done, passed on the command line
	TARGETDIR="${1%%/}"

	#  Set container's timezone to match my local time
	ln -sf /usr/share/zoneinfo/EST5EDT /etc/localtime

	#  Update Debian inside the container
	echo "$(date "$DATEFMT"): Install latest Debian updates in this container"
	apt -y update
	apt -y upgrade
	
	#  Get geolocation files for ntopng-data package
	echo "$(date "$DATEFMT"): Fetching geolocation database files from db-ip.com"
	if [ -d ${HOME}/dat_files ]; then
		rm -fr ${HOME}/dat_files
	fi
	mkdir ${HOME}/dat_files
	cd ${HOME}/dat_files
	wget -nv https://download.db-ip.com/free/dbip-city-lite-$(date +%Y-%m).mmdb.gz
	wget -nv https://download.db-ip.com/free/dbip-country-lite-$(date +%Y-%m).mmdb.gz
	wget -nv https://download.db-ip.com/free/dbip-asn-lite-$(date +%Y-%m).mmdb.gz
	gunzip *.gz

	#  Copy in my PPA repo's signing key
	echo "$(date "$DATEFMT"): Copying in signing key for my PPA repo"
	cp -R "${TARGETDIR}/../.gnupg" "${HOME}/"

	#  Download the source and build the packages
	mkdir ~/src
	cd ~/src
	echo "$(date "$DATEFMT"): Downloading nDPI source"
	BRANCH=""
	if [ ! -z "$NDPI_STABLE_VERSION" ]; then
		BRANCH="--branch=$NDPI_STABLE_VERSION"
	fi
	git clone https://github.com/ntop/nDPI.git $BRANCH
	echo "$(date "$DATEFMT"): Downloading ntopng source"
	BRANCH=""
	if [ ! -z "$STABLE_VERSION" ]; then
		BRANCH="--branch=$STABLE_VERSION"
	fi
	git clone https://github.com/ntop/ntopng.git $BRANCH
	echo "$(date "$DATEFMT"): Compiling nDPI"
	cd ~/src/nDPI
	./autogen.sh
	make -j
	echo "$(date "$DATEFMT"): Compiling ntopng"
	cd ~/src/ntopng
	./autogen.sh
	./configure
	make 		#  NOTE: Multi-threaded compile crashes the container
	
	#  Customizations for UDM environment
	cd packages
	echo "$(date "$DATEFMT"): Patching ntopng configuration files for the UDM ebvironment"
	patch -p0 <${TARGETDIR}/../../ntopng-on-udm-pro/udm.patch

	#  *.deb package build
	echo "$(date "$DATEFMT"): Building Debian packages"
	cd debian
	./configure
	make

	#  Move the new packages over to container host
	SUBDIR='unstable'
	if [ ! -z "$STABLE_VERSION" ]; then
		SUBDIR='stable'
	fi
	echo "$(date "$DATEFMT"): Moving package files to repo directory ${TARGETDIR}/pool/main/n/ntopng/$SUBDIR"
	mv ntopng*.deb "${TARGETDIR}/pool/main/n/ntopng/$SUBDIR"

	echo "$(date "$DATEFMT"): Build complete, shutting down build container"
fi
